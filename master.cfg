# -*- python -*-
# ex: set syntax=python:


# Adding a new slave:
# 1. put password in local_config.py 
# 2. add entry in "### Builders" section
#    e.g. add_builder("x86_64_py26_UbuntuLucid",build_and_test(),"slavename")


# TODO
# * Windows vm: need mingw32?
# * Set up email
# * SciPy: probably will want at least one slave to be triggered by
#   numpy build (and use that new numpy build)


import local_config

PROJNAME = "NumPy"
PROJURL = "http://numpy.scipy.org/"
GITURL = "git://github.com/numpy/numpy.git"


##################################################################################
### Convenience functions and variables
# (shouldn't need frequent editing; first skip to subsequent sections)

c = BuildmasterConfig = {}
c['slaves' ] = []
c['schedulers'] = []
c['builders'] = []
c['status'] = []
c['change_source'] = []
slave_locks = {}

from buildbot.buildslave import BuildSlave
from buildbot.locks import SlaveLock

def add_slave(name):
    slave = BuildSlave(name,local_config.slave_passwords[name],
                       notify_on_missing=local_config.NOTIFICATION_EMAIL)

    c['slaves'].append(slave)

    slave_locks[name] = SlaveLock(name,maxCount=1)


def add_builder(name,factory_,slavename,lock=True):

    add_slave(slavename) 

    # CB: might need to extend to support multiple locks
    # (e.g. multiple VMs on same host)
    if lock is True:
        locks = [slave_locks[slavename]]
    else:
        locks = None

    c['builders'].append( 
        dict(name=name,slavename=slavename,builddir=name,
             factory=factory_,locks=locks))


### Building, checkout, etc

from buildbot.steps.source import Git
def add_git_clone(factory_,mode="update"):
    factory_.addStep(Git(repourl=GITURL,mode=mode))


from buildbot.steps.shell import ShellCommand
def add_command(factory_,command_,**kw):
    factory_.addStep(ShellCommand,command=command_,**kw)

# checkout + build + test + coverage
from buildbot.process.factory import BuildFactory
def build_and_test(tox_env=None):
    # tox_env string allows to restrict slave to certain tox env e.g.
    #  tox_env="py26,p27" (--> tox -e py26,py27) 
    # for a machine that only has those versions of python

    factory_ = BuildFactory()

    add_git_clone(factory_)

    cmd = ["tox"]

    if tox_env is not None:
        cmd += ["-e",tox_env]

    cmd += ["--","-m","full","--coverage"]

    add_command(factory_,cmd,description=['build','and','test',tox_env])

    # CEBALERT: add coverage

    return factory_

##################################################################################



##################################################################################
### General config

c['slavePortnum'] = local_config.BBPORT
c['buildbotURL'] = local_config.BBURL
c['projectName'] = PROJNAME
c['projectURL'] = PROJURL

##################################################################################



##################################################################################
### Status reports

# web page
from buildbot.status.html import WebStatus
c['status'].append(WebStatus(local_config.WEBPORT,
                             change_hook_dialects={ #'github' : True, 
                                                    'base'   : True}))

# CB: enable github change_hook_dialect in bb 0.8.7 (when bug #2186 is
# fixed). Could then remove git poller. Should also then restrict
# ChangeFilters to numpy github repo and set a reasonable value for
# treeStableTimer.


# CB: Could configure email to go to a list and/or individual users
#from buildbot.status import mail
#c['status'].append(mail.MailNotifier(fromaddr=NOTIFICATION_EMAIL,
#                                     mode='failing',
#                                     extraRecipients=[NOTIFICATION_EMAIL],
#                                     sendToInterestedUsers=False))


##################################################################################
### Change sources

from buildbot.changes.gitpoller import GitPoller

c['change_source'].append(GitPoller(
        repourl=GITURL,
        branch='master',
        workdir='gitpoller',
        pollinterval=30*60)) # 30 min

##################################################################################



##################################################################################
### Builders
# (note: also creates slave; assuming one builder per slave for simplicity)

# CB: basic example for testing
add_builder("x86_64_py26_UbuntuLucid",build_and_test(tox_env="py26"),"doozy")

##################################################################################



##################################################################################
### Schedulers 

from buildbot.changes.filter import ChangeFilter
from buildbot.schedulers.basic import SingleBranchScheduler

# CB: example for testing

### schedules builds after pushes to master
c['schedulers'].append(
    SingleBranchScheduler(
        name="after_push",
        change_filter=ChangeFilter(branch="master"), 
        builderNames=[b['name'] for b in c['builders']]))

##################################################################################
